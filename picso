#!/bin/bash
declare -i dryrun=0	
declare -a sernam					#service names for rrinfo file
sernam[0]="sprunge.us"
sernam[1]="paste.c-net.org"
sernam[2]="ix.io"
sernam[3]="0x0.st"
sernam[4]="hastebin.com"
function service0 {			#functions to call with the respective commands necessary
curl -F 'sprunge=</tmp/upload_file' http://sprunge.us
return
}
function service1 {
curl --upload-file /tmp/upload_file 'https://paste.c-net.org/'
return
}
function service2 {
curl -F 'f:1=</tmp/upload_file' ix.io
return
}
function service3 {
curl -F'file=@/tmp/upload_file' https://0x0.st
return
}
function service4 {
key=$(curl -XPOST -s '/tmp/upload_file' https://hastebin.com/documents | cut -d'"' -f4)
printf "https://hastebin.com/%s\n" "$key"
return
}
function help_function {
printf "This is the publish info for community support online script.\nIt's intended use is to ease the use of different online pastebins\nfor usage to get support from the communities.\n"
printf "		\-h		display this help screen\n		\-d		perform a run without uploading files\nV1.0\n"
}
if [ ! -d ~/.config/picso ] ; then								
	mkdir ~/.config/picso				#check if round robin folder and file exist, if not create  them.
fi
if [ ! -f ~/.config/picso/rrinfo ] ; then
	touch ~/.config/picso/rrinfo
fi
sernum=0
while [ $sernum -lt ${#sernam[@]} ] ; do			#check if rrinfo is populated with all services, else populate it
	if [ "$(grep -c "${sernam[$sernum]}" ~/.config/picso/rrinfo )" != "1" ] ; then
		if [ "$(grep -c ";" ~/.config/picso/rrinfo )" -lt 1 ] ; then
			echo "${sernam[$sernum]};0" >> ~/.config/picso/rrinfo
		else
			lonum=$( tail -n1 ~/.config/picso/rrinfo | cut -d";" -f2 )
			echo "${sernam[$sernum]};$lonum" >> ~/.config/picso/rrinfo
		fi
	fi
	((sernum+=1))
done


param=1
while [ $# -ge $param ] ; do		#manage parameters
	case $1 in
		-h ) 						#show help
		help_function
		exit 0
		;;
		-d )						# stop it from uploading, mainly for testing
		dryrun=1
		;;
		* ) 
		printf "%s is an invalid argument. For help use -h\n" "$1"
		exit 1
		;;
	esac
	shift
done



cat /proc/self/fd/0  > /tmp/upload_file								#funnel pipe into file
if [ ! $(file /tmp/upload_file | grep -c -i text) -ge 1 ] ; then	#so we can test for text
	printf "Piped in information does not appear to be text.\n"
	printf "$(file /tmp/upload_file)\n"
	rm /tmp/upload_file						#if no text error, cleanup then exit
	exit 1
fi



decnum=						#decide which service to use via rr style
sernum=0
max=1000000
while [ $sernum -lt ${#sernam[@]} ] ; do
	seruse=$(grep "${sernam[$sernum]}" ~/.config/picso/rrinfo | cut -d";" -f2 )
	if [ $seruse -lt $max ] ; then
		max=$seruse
		decnum=$sernum
	fi
	((sernum+=1))
done		



if [ -z $decnum ] ; then				#check if decision error occured
	printf " Error occured. No decision in service to post to could be made.\n"
	cat ~/.config/picso/rrinfo
	printf "max = %s\n" "$max"
	rm /tmp/upload_file
	exit 1
elif [ $dryrun -lt 1 ] ; then			#else upload the file via function then update the rrinfo file
	service$decnum
	((newuse=seruse + 1))
	sed -i "s/${sernam[$decnum]}\;$seruse/${sernam[$decnum]}\;$newuse/g" ~/.config/picso/rrinfo
fi

rm /tmp/upload_file						#cleanup the created file
exit 0								